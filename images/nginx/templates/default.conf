user www-data;

# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes auto; #some last versions calculate it automatically

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 100000;

# only log critical errors
error_log /var/log/nginx/error.log crit;

# The PID file is a simple text file containing the process identifier. 
pid /run/nginx.pid;

# provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;

    # optimized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # to boost I/O on HDD we can disable access logs
    access_log off;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # reduce the data that needs to be sent over network -- for testing environment
    gzip on;
    # gzip_static on;
    gzip_min_length 10240;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 10;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # server will close connection after this time -- default 75
    keepalive_timeout 30;

    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;

    server {
        listen 80;
	    listen [::]:80;
        server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};

        location ~ /.well-known/acme-challenge {
          allow all;
          root /static;
        }   

        location / {
            rewrite ^ https://${DOLLAR}host${DOLLAR}request_uri? permanent;
        }

        location /health {
            return 200 'alive';
            add_header Content-Type text/plain;
        }        
        
    }

    server {
        listen 443 http2 ssl;
        listen [::]:443 http2 ssl;

        server_tokens off;

        server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};

    	ssl_certificate /etc/ssl/certs/iot_platform_cert.cer;
    	ssl_certificate_key /etc/ssl/certs/iot_platform.key;
        ssl_trusted_certificate /etc/ssl/certs/iot_platform_ca.pem;
        ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

        ssl_buffer_size 8k;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

        ssl_ecdh_curve secp384r1;
        ssl_session_tickets off;

        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8; 

        # access_log /var/log/nginx/nginx.vhost.access.log;
    	# error_log /var/log/nginx/nginx.vhost.error.log;
        error_log  stderr warn;
        access_log  /dev/stdout;

        proxy_redirect off;
        proxy_http_version  1.1;
        proxy_cache_bypass  ${DOLLAR}http_upgrade;
        proxy_set_header Upgrade ${DOLLAR}http_upgrade;   
        proxy_set_header Connection "upgrade";
        proxy_set_header Host ${DOLLAR}host;
        proxy_set_header X-Real-IP ${DOLLAR}remote_addr;   
        proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;   
        proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
        proxy_set_header X-Forwarded-Host ${DOLLAR}host; 
        proxy_set_header X-Forwarded-Port ${DOLLAR}server_port;
        proxy_connect_timeout      90;
        proxy_send_timeout         90;
        proxy_read_timeout         90;
        proxy_buffer_size          4k;
        proxy_buffers              4 32k;
        proxy_busy_buffers_size    64k;
        proxy_temp_file_write_size 64k;
        proxy_temp_path /etc/nginx/proxy_temp;

        root /static;

        location / {
       	    proxy_pass http://grafana:5000/;
            # proxy_max_temp_file_size 0;
        }

        location /nodered/ {
       	    proxy_pass http://nodered:1880/; 
        }

        location /portainer/ {
       	    proxy_pass http://portainer:9000/; 
        }

        location /pgadmin4/ {
       	    proxy_pass http://pgadmin4/;
            proxy_http_version 1.1;
            proxy_set_header X-Script-Name /pgadmin4;
            proxy_set_header Upgrade ${DOLLAR}http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host ${DOLLAR}host;
            proxy_cache_bypass ${DOLLAR}http_upgrade;            
        } 

        location /admin/ {
       	    proxy_pass http://admin_frontend/; 
        }

        location /admin_api/ {
       	    proxy_pass http://admin_api:3200/; 
        }

        location /mobile/ {
            proxy_pass http://mobile_frontend/;
        }

        # location /kibana/ {
        #     proxy_pass http://kibana:5601/kibana/;
        # }

        # location /metrics/ {
       	#     proxy_pass http://grafana_metrics:3000/; 
        # }     
        
        # location /protected_path {
        #   auth_request     /auth;
        #   error_page 401 = @error401;
        #    index index.html;
        # }

        # location /auth {
        #    internal;
        #    proxy_set_header X-MY-URL ${DOLLAR}scheme://${DOLLAR}http_host${DOLLAR}request_uri;
        #    proxy_pass http://nodered:1880/authRequest/;
        # }       

        # location @error401 {
        #    add_header Set-Cookie "NSREDIRECT=${DOLLAR}scheme://${DOLLAR}http_host${DOLLAR}request_uri;Domain=${DOMAIN_NAME};Path=/";
        #    return 302 https://${DOMAIN_NAME}/login_page;
        # }

    }
}
