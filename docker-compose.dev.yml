version: "3"

services:

  postgres:
    container_name: ${PLATFORM_NAME}_postgres
    build:
      context: ./images/postgres
    networks:
      - internal_net  
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      GRAFANA_DB_PASSWORD: ${GRAFANA_DB_PASSWORD}
      GRAFANA_DATASOURCE_PASSWORD: ${GRAFANA_DATASOURCE_PASSWORD}
    volumes:
      - ${HOST_VOLUMES_PATH}/pgdata:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 4s
      timeout: 120s
      retries: 30
    restart: unless-stopped

  grafana:
    container_name: ${PLATFORM_NAME}_grafana
    build: ./images/grafana
    user: "${UID}:${GID}"
    networks:
      - internal_net      
    ports:
      - "127.0.0.1:5000:5000"
    volumes:
      - ${HOST_VOLUMES_PATH}/grafana:/var/lib/grafana
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,natel-discrete-panel,briangann-gauge-panel,vonage-status-panel,neocat-cal-heatmap-panel
      - GRAFANA_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - HOME_DASHBOARD_PATH=/var/lib/grafana/data/home_dashboard.json
      - GMAIL_USER=${GMAIL_USER}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_ADDRESS=${EMAIL_ADDRESS}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - TELEGRAM_BOTTOKEN=${TELEGRAM_BOTTOKEN}
      - TELEGRAM_CHATID=${TELEGRAM_CHATID}
      - GF_RENDERING_SERVER_URL=http://grafana_renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:5000/
      - GF_LOG_FILTERS=rendering:debug
      - POSTGRES_DB=${POSTGRES_DB}
      - GRAFANA_DB_PASSWORD=${GRAFANA_DB_PASSWORD}
      - GRAFANA_DATASOURCE_PASSWORD=${GRAFANA_DATASOURCE_PASSWORD}
      - MAIN_ORGANIZATION_NAME=${MAIN_ORGANIZATION_NAME}
      - MAIN_ORGANIZATION_DATASOURCE_NAME=${MAIN_ORGANIZATION_DATASOURCE_NAME}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:5000/api/health || exit 1"]
      interval: 10s
      timeout: 300s
      retries: 30
    depends_on:
      postgres:
        condition: service_healthy

  # nodered:
  #   container_name: ${PLATFORM_NAME}_nodered
  #   build: ./images/nodered
  #   user: "${UID}:${GID}"
  #   networks:
  #     - internal_net
  #   env_file:
  #     - .env
  #   ports:
  #     - "127.0.0.1:1880:1880"
  #   volumes:
  #     - ${HOST_VOLUMES_PATH}/nodered/:/data
  #   restart: unless-stopped
  #   depends_on:
  #     postgres:
  #       condition: service_healthy        

  grafana_renderer:
    container_name: ${PLATFORM_NAME}_grafana_rendered
    build: ./images/grafana_renderer
    networks:
      - internal_net
    ports:
      - 8081
    environment:
      ENABLE_METRICS: 'true'
    restart: unless-stopped

  pgadmin4:
    container_name: ${PLATFORM_NAME}_pgadmin
    build:
      context: ./images/pgadmin4 
      dockerfile: Dockerfile
    user: "${UID}:${GID}"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
       - ${HOST_VOLUMES_PATH}/pgadmin_data/servers.json:/pgadmin4/servers.json
       - ${HOST_VOLUMES_PATH}/pgadmin_data/pgadmin:/var/lib/pgadmin
    ports:
      - "127.0.0.1:5050:80"
    networks:
      - internal_net
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost || exit 1"]
      interval: 10s
      timeout: 300s
      retries: 30      
    restart: unless-stopped

  admin_api:
    build:
      context: ./images/admin_api
      dockerfile: Dockerfile.dev    
    container_name: ${PLATFORM_NAME}_admin_api
    networks:
      - internal_net
    restart: always    
    volumes:
      - node_modules_vol:/app/node_modules
      - ./images/admin_api:/app
      - ${SSL_CERTIFICATE_SERVER_PATH}:/app/ssl_config/iot_platform.cer
      - ${SSL_CERTIFICATE_KEY_PATH}:/app/ssl_config/iot_platform.key
    working_dir: /app
    env_file:
      - .env
    environment:
      PORT: 3200
      WAIT_HOSTS: postgres:5432, grafana:5000
      WAIT_HOSTS_TIMEOUT: 300
      WAIT_SLEEP_INTERVAL: 5
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --insecure https://localhost:3200/health || exit 1"]
      interval: 10s
      timeout: 300s
      retries: 30
    ports:
    - "3200:3200"

  admin_frontend:
    build: 
      context: ./images/admin_frontend
      dockerfile: Dockerfile
    container_name: ${PLATFORM_NAME}_admin_frontend
    networks:
      - internal_net
    command: nginx -g "daemon off";
    depends_on:   
      admin_api:
        condition: service_started

networks:
  internal_net:

volumes:
  node_modules_vol:
